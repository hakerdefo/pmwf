#!/usr/bin/env bash
########################################
local_latitude=
local_longitude=
local_unit=
api_key=
local_rm=$(which rm)
########################################

printf "\033c"

if [ -z "$local_latitude" ]; then
	echo ""
	echo "Variable \"local_latitude\" is either unset or empty!"
	echo ""
	exit 1
fi

if [ -z "$local_longitude" ]; then
	echo ""
	echo "Variable \"local_longitude\" is either unset or empty!"
	echo ""
	exit 1
fi

if [ -z "$local_unit" ]; then
	echo ""
	echo "Variable \"local_unit\" is either unset or empty!"
	echo ""
	exit 1
fi

if [ -z "$api_key" ]; then
	echo ""
	echo "Variable \"api_key\" is either unset or empty!"
	echo ""
	exit 1
fi

type wget >/dev/null 2>&1 || { printf "\033c"; echo -e ""; for i in {16..51} {51..16}; do echo -en "\e[38;5;${i}m#\e[0m"; done; echo; echo -e ""; echo -e '\e[38;5;82m'"A required pmwf dependency \"Wget\" is unavailable"; echo -e '\e[38;5;82m'"\"Wget\" is available for almost all linux distros."; echo -e '\e[38;5;82m'"Please install \"wget\" using your package manager."; echo -e '\e[38;5;82m'"Please visit the homepage of \"Wget\" for more info"; echo -e '\e[38;5;82m'"https://www.gnu.org/software/wget/"; echo -e ""; for i in {16..51} {51..16}; do echo -en "\e[38;5;${i}m#\e[0m"; done; echo; echo -e ""; tput sgr0; exit 1; }


type jq >/dev/null 2>&1 || { printf "\033c"; echo -e ""; for i in {16..51} {51..16}; do echo -en "\e[38;5;${i}m#\e[0m"; done; echo; echo -e ""; echo -e '\e[38;5;82m'"A required pmwf dependency \"jq\" is unavailable"; echo -e '\e[38;5;82m'"\"jq\" is available for almost all linux distros."; echo -e '\e[38;5;82m'"Please install \"jq\" using your package manager."; echo -e '\e[38;5;82m'"Please visit the homepage of \"jq\" for more info"; echo -e '\e[38;5;82m'"https://jqlang.github.io/jq/"; echo -e ""; for i in {16..51} {51..16}; do echo -en "\e[38;5;${i}m#\e[0m"; done; echo; echo -e ""; tput sgr0; exit 1; }

if ! wget --spider --user-agent="Mozilla/5.0 Gecko/20100101" --no-check-certificate --quiet --timeout=30 -q "www.google.com" -O /dev/null; then
	printf "\033c"
	echo ""
	{ for i in {16..51} {51..16}; do echo -en "\e[38;5;${i}m#\e[0m"; done; echo; }
	echo ""
	echo -e '\e[38;5;82m' "No active internet connection available!!"
	echo -e '\e[38;5;82m' "Please check your internet connectivity!!"
	echo ""
	{ for i in {16..51} {51..16}; do echo -en "\e[38;5;${i}m#\e[0m"; done; echo; }
	echo ""
	tput sgr0
	exit 1
fi

wget --user-agent="Mozilla/5.0 Gecko/20100101" --quiet --timeout=30 "http://api.openweathermap.org/data/2.5/weather?lat=$local_latitude&lon=$local_longitude&units=$local_unit&mode=json&APPID=$api_key" --output-document "/tmp/current.json"

wget --user-agent="Mozilla/5.0 Gecko/20100101" --quiet --timeout=30 "http://api.openweathermap.org/data/2.5/forecast/daily?lat=$local_latitude&lon=$local_longitude&cnt=4&units=$local_unit&mode=json&APPID=$api_key" --output-document "/tmp/forecast.json"

if [[ ! -f "/tmp/current.json" ]]; then
	echo ""
	echo -e "Failed to get the weather data from openweathermap.org!"
	echo -e "Make sure that you are able to connect to this website!"
	echo ""
	exit 1
fi

if [[ ! -f "/tmp/forecast.json" ]]; then
	echo ""
	echo -e "Failed to get the weather data from openweathermap.org!"
	echo -e "Make sure that you are able to connect to this website!"
	echo ""
	exit 1
fi

if ! grep -q '[^[:space:]]' "/tmp/current.json"; then
	echo ""
	echo -e "Failed to get the weather data from openweathermap.org!"
	echo -e "Make sure that you are using a valid and active API key!"
	echo ""
	exit 1
fi

if ! grep -q '[^[:space:]]' "/tmp/forecast.json"; then
	echo ""
	echo -e "Failed to get the weather data from openweathermap.org!"
	echo -e "Make sure that you are using a valid and active API key!"
	echo ""
	exit 1
fi

place=$(jq -r '.city.name' "/tmp/forecast.json")
nation=$(jq -r '.city.country' "/tmp/forecast.json")
time2=$(jq -r '.list[1].dt' "/tmp/forecast.json")
time3=$(jq -r '.list[2].dt' "/tmp/forecast.json")
time4=$(jq -r '.list[3].dt' "/tmp/forecast.json")
time22=$(date -d @"$time2" +'%A, %d %B %Y')
time33=$(date -d @"$time3" +'%A, %d %B %Y')
time44=$(date -d @"$time4" +'%A, %d %B %Y')
tempcurrent=$(jq -r '.main.temp' "/tmp/current.json")
min2=$(jq -r '.list[1].temp.min' "/tmp/forecast.json")
min3=$(jq -r '.list[2].temp.min' "/tmp/forecast.json")
min4=$(jq -r '.list[3].temp.min' "/tmp/forecast.json")
max2=$(jq -r '.list[1].temp.max' "/tmp/forecast.json")
max3=$(jq -r '.list[2].temp.max' "/tmp/forecast.json")
max4=$(jq -r '.list[3].temp.max' "/tmp/forecast.json")
pressurecurrent=$(jq -r '.main.pressure' "/tmp/current.json")
pressure2=$(jq -r '.list[1].pressure' "/tmp/forecast.json")
pressure3=$(jq -r '.list[2].pressure' "/tmp/forecast.json")
pressure4=$(jq -r '.list[3].pressure' "/tmp/forecast.json")
humidcurrent=$(jq -r '.main.humidity' "/tmp/current.json")
humid2=$(jq -r '.list[1].humidity' "/tmp/forecast.json")
humid3=$(jq -r '.list[2].humidity' "/tmp/forecast.json")
humid4=$(jq -r '.list[3].humidity' "/tmp/forecast.json")
windcurrent=$(jq -r '.wind.speed' "/tmp/current.json")
wind2=$(jq -r '.list[1].speed' "/tmp/forecast.json")
wind3=$(jq -r '.list[2].speed' "/tmp/forecast.json")
wind4=$(jq -r '.list[3].speed' "/tmp/forecast.json")
direcurrent=$(jq -r '.wind.deg' "/tmp/current.json")
dire2=$(jq -r '.list[1].deg' "/tmp/forecast.json")
dire3=$(jq -r '.list[2].deg' "/tmp/forecast.json")
dire4=$(jq -r '.list[3].deg' "/tmp/forecast.json")
condicurrent=$(jq -r '.weather[].description' "/tmp/current.json")
condi2=$(jq -r '.list[1].weather[].description' "/tmp/forecast.json")
condi3=$(jq -r '.list[2].weather[].description' "/tmp/forecast.json")
condi4=$(jq -r '.list[3].weather[].description' "/tmp/forecast.json")

if [[ "$local_unit" == imperial ]]; then
	windcurrent1="$windcurrent"
	wind22="$wind2"
	wind33="$wind3"
	wind44="$wind4"
	symb=$(echo -e "\u2109")
	symb2="mph"
else
	windcurrent1=$(awk "BEGIN {print $windcurrent * 3.6}")
	wind22=$(awk "BEGIN {print $wind2 * 3.6}")
	wind33=$(awk "BEGIN {print $wind3 * 3.6}")
	wind44=$(awk "BEGIN {print $wind4 * 3.6}")
	symb=$(echo -e "\u2103")
	symb2="kph"
fi

printf "\033c"

echo -e '\e[01m'""
echo -e "Location - $place, $nation:"
echo ""
echo -e "Current weather conditions:"
echo -e '\e[0m'""
echo -e "Temperature - $tempcurrent $symb"
echo -e "Atmospheric Pressure - $pressurecurrent hPa"
echo -e "Humidity - $humidcurrent %"
echo -e "Wind speed - $windcurrent1 $symb2"
echo -e "Wind direction - $direcurrent째"
echo -e "Weather condition - $condicurrent"
echo -e '\e[01m'""
echo -e "Forecast for $time22:"
echo -e '\e[0m'""
echo -e "Minimum Temperature - $min2 $symb"
echo -e "Maximum Temperature - $max2 $symb"
echo -e "Atmospheric Pressure - $pressure2 hPa"
echo -e "Humidity - $humid2 %"
echo -e "Wind speed - $wind22 $symb2"
echo -e "Wind direction - $dire2째"
echo -e "Weather condition - $condi2"
echo -e '\e[01m'""
echo -e "Forecast for $time33:"
echo -e '\e[0m'""
echo -e "Minimum Temperature - $min3 $symb"
echo -e "Maximum Temperature - $max3 $symb"
echo -e "Atmospheric Pressure - $pressure3 hPa"
echo -e "Humidity - $humid3 %"
echo -e "Wind speed - $wind33 $symb2"
echo -e "Wind direction - $dire3째"
echo -e "Weather condition - $condi3"
echo -e '\e[01m'""
echo -e "Forecast for $time44:"
echo -e '\e[0m'""
echo -e "Minimum Temperature - $min4 $symb"
echo -e "Maximum Temperature - $max4 $symb"
echo -e "Atmospheric Pressure - $pressure4 hPa"
echo -e "Humidity - $humid4 %"
echo -e "Wind speed - $wind44 $symb2"
echo -e "Wind direction - $dire4째"
echo -e "Weather condition - $condi4"
echo -e ""

"$local_rm" -f "/tmp/forecast.json"
"$local_rm" -f "/tmp/current.json"

exit 0
########################################
